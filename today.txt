(#include<list>
#include<iostream>
using namespace std;

class List {
	class Node {
    public:
        int data;
        Node *next;
        Node *prev;
        Node(int data = 0, Node *next= nullptr, Node *prev = nullptr) {
            this->data = data;
            this->next = next;
            this->prev = prev;
        }
    };
    
    int size;
    Node *head;
    Node *tail;
public:
    List() {
        size = 0;
        head = nullptr;
        tail = nullptr;
    }
    
    int lenght() {
        return size;
    }
    
    void push_back(int data) {
        if (tail == nullptr) {
            tail = new Node(data);
            head = tail;
        }
        else {
            Node *temp = new Node(data, nullptr, tail);
            tail->next = temp;
            tail = temp;
        }
        size++;
    }

    void swap(int index1, int index2) {
    	//swap the elements which are located at the index1 and index2 postitions
    }

    void pop_back() {
    	//delete the last element
    if (size <= 0)
            throw out_of_range("");
        else {
            Node *temp = head;
            while (temp->next != nullptr)
                temp = temp->next;
            delete temp;
            size--;
        }
    }

    int search(int key) {
    	//find the element and return its index, otherwise return -1;

    	return 0;
    }

    int binary_search(int key, int start, int end) {
    	//find the element using the binary search, if element found
    	//return its index, otherwise return -1;
    	return 0;
    }

    void getInfo() {
    	//display the next values:
    	//Max: ...
    	//Min: ...
    	//Sum: ...
    	//AVG: ...
    }
    
    void clear_all() {
        while (size != 0) {
            pop_back();
        }
    }
    
    ~List() {
        clear_all();
    }

    //overload the operator <<  
    //output format:   [1,2,3,4,5]
    friend ostream& operator << (ostream& out, List& obj){for(int i=0; i<l.length(); i++)
            out<<l[i]<<" ";
        return out};
};

int main() {
  list<int> l;
  l.push_back(1);
  l.push_back(2);
  l.push_back(3);

  list<int>::iterator it = l.begin();
  cout<<*it<<endl;

  

})



#include<iostream>
using namespace std;

class List {
	class Node {
    public:
        int data;
        Node *next;
        Node *prev;
        Node(int data = 0, Node *next= nullptr, Node *prev = nullptr) {
            this->data = data;
            this->next = next;
            this->prev = prev;
        }
    };
    
    int size;
    Node *head;
    Node *tail;
public:
    List() {
        size = 0;
        head = nullptr;
        tail = nullptr;
    }
    
    int lenght() {
        return size;
    }
    
    void push_back(int data) {
        if (tail == nullptr) {
            tail = new Node(data);
            head = tail;
        }
        else {
            Node *temp = new Node(data, nullptr, tail);
            tail->next = temp;
            tail = temp;
        }
        size++;
    }

    void swap(int index1, int index2) {
    	//swap the elements which are located at the index1 and index2 postitions
    }

    void pop_back() {
    	//delete the last element
    if (size <= 0)
            throw out_of_range("");
        else {
            Node *temp = head;
            while (temp->next != nullptr)
                temp = temp->next;
            delete temp;
            size--;
        }
    }

    int search(int key) {
    	//find the element and return its index, otherwise return -1;
    	return 0;
    }

    int binary_search(int key, int start, int end) {
    	//find the element using the binary search, if element found
    	//return its index, otherwise return -1;
    	return 0;
    }

    void getInfo() {
    	//display the next values:
    	//Max: ...
    	//Min: ...
    	//Sum: ...
    	//AVG: ...
    }
    
    void clear_all() {
        while (size != 0) {
            pop_back();
        }
    }
    
    ~List() {
        clear_all();
    }

    //overload the operator <<  
    //output format:   [1,2,3,4,5]
    friend ostream& operator << (ostream& out, List& obj){for(int i=0; i<l.length(); i++)
            out<<l[i]<<" ";
        return out};
};

int main() {

}




#1

#include<iostream>
#include <queue>

using namespace std;

void push_back(queue<int> &q,int x){
    q.push(x);
}

int pop_front(queue<int> &q){
   if(!q.empty()){ 
    int x=q.front();
    q.pop();
    return x;
    }
    else
    return -1;
   
}

int pSize(queue<int> &q){
   return q.size();
}

int pLast(queue<int> &q){
	if(q.empty()) return -1;
	return q.back();
}


int pFront(queue<int> &q){
	if(q.empty()) return -1;
	return q.front();
}

int main(){
  int T;
  cin>>T;

  int Q;
  cin>>Q;

  while(T--){
    queue<int> q;
    int Q;
    cin>>Q;
    switch(Q){
      case 'a':
        int x;
        cin>>x; 
        push_back(q,x);
      case 'b':
        pop_front(q);
      case'c':
        pSize(q);
      case 'd':
        
    }
  }
}


